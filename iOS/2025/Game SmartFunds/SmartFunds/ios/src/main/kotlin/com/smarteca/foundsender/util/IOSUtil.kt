package com.smarteca.foundsender.util

import com.smarteca.foundsender.game.utils.gdxGame
import com.smarteca.foundsender.game.utils.log
import com.smarteca.foundsender.util.WebUtil.WebViewController
import org.robovm.apple.dispatch.DispatchQueue
import org.robovm.apple.foundation.NSArray
import org.robovm.apple.foundation.NSError
import org.robovm.apple.foundation.NSString
import org.robovm.apple.foundation.NSURL
import org.robovm.apple.messageui.MFMailComposeResult
import org.robovm.apple.messageui.MFMailComposeViewController
import org.robovm.apple.messageui.MFMailComposeViewControllerDelegateAdapter
import org.robovm.apple.safariservices.SFSafariViewController
import org.robovm.apple.safariservices.SFSafariViewControllerDelegate
import org.robovm.apple.uikit.*

object IOSUtil {

    fun openUrlInSafari(url: String) {
        val nsUrl = safeNSURL(url) ?: return

        val app = UIApplication.getSharedApplication()

        if (app.canOpenURL(nsUrl)) {
            // –í–∏–∫–æ–Ω—É—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ—Ü—ñ
            DispatchQueue.getMainQueue().async {
                app.openURL(nsUrl, UIApplicationOpenURLOptions(), null)
            }
        } else log("openUrlInSafari: ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ URL —É Safari!")
    }

    fun openUrlInSafariViewController(url: String) {
        val nsUrl = safeNSURL(url) ?: return

        DispatchQueue.getMainQueue().async {
            val safariVC           = SafariWebViewController(nsUrl)
            val window: UIWindow   = UIApplication.getSharedApplication().windows.first()
            val rootViewController = window.rootViewController

            gdxGame.pause()
            rootViewController?.presentViewController(safariVC, true, null)
        }
    }

    fun sendEmail(email: String) {
        DispatchQueue.getMainQueue().async {
            val window = UIApplication.getSharedApplication().windows.first()
            val rootViewController = window.rootViewController

            if (MFMailComposeViewController.canSendMail()) {
                val mailCompose = MFMailComposeViewController().apply {
                    setToRecipients(listOf(email))
                    setSubject("Subject of the letter")
                    setMessageBody("Message text", false)
                }

                mailCompose.mailComposeDelegate = object : MFMailComposeViewControllerDelegateAdapter() {
                    override fun didFinish(
                        controller: MFMailComposeViewController?,
                        result: MFMailComposeResult?,
                        error: NSError?
                    ) {
                        controller?.dismissViewController(true, null)
                    }
                }

                rootViewController.presentViewController(mailCompose, true, null)
            } else {
                // –Ø–∫—â–æ –Ω–µ–º–∞—î –ø–æ—à—Ç–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
                //val gmailUrl = "https://mail.google.com/mail/?view=cm&to=$email"
                //val yahooUrl = "https://compose.mail.yahoo.com/?to=$email"

                val subject   = "Subject of the letter".encodeURL()
                val body      = "Message text".encodeURL()
                val mailtoUrl = "mailto:$email?subject=$subject&body=$body"
                openUrlInSafari(mailtoUrl)
            }
        }
    }

    private fun safeNSURL(url: String): NSURL? {
        if (url.isBlank()) {
            log("safeNSURL: ‚ö†Ô∏è URL –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!")
            return null
        }

        val encodedUrl = url.encodeURL()
        val nsUrl = NSURL(encodedUrl)

        if (nsUrl == null) {
            log("safeNSURL: ‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ NSURL –∑ $encodedUrl")
        }

        return nsUrl
    }


    private fun String.encodeURL(): String {
        return this.replace(" ", "%20")
            .replace("\n", "%0A")
            .replace("&", "%26")
            .replace("?", "%3F")
    }

    // class ----------------------------------------------------------------------------

    class SafariWebViewController(url: NSURL) : SFSafariViewController(url), SFSafariViewControllerDelegate {

        init {
            this.delegate = this // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ–ª–µ–≥–∞—Ç
            configureUI()
        }

        // üîπ –ö–∞—Å—Ç–æ–º—ñ–∑–∞—Ü—ñ—è UI (–∫–æ–ª—å–æ—Ä–∏, –∫–Ω–æ–ø–∫–∏)
        private fun configureUI() {
            //preferredBarTintColor = UIColor.darkGray() // –ö–æ–ª—ñ—Ä —Ñ–æ–Ω—É –≤–µ—Ä—Ö–Ω—å–æ—ó –ø–∞–Ω–µ–ª—ñ
            //preferredControlTintColor = UIColor.white() // –ö–æ–ª—ñ—Ä –∫–Ω–æ–ø–æ–∫
            //dismissButtonStyle = SFSafariViewControllerDismissButtonStyle.Done // –°—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä–∏—Ç–∏"
        }

        // üîπ –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –±—Ä–∞—É–∑–µ—Ä–∞
        override fun didFinish(controller: SFSafariViewController) {
            gdxGame.resume()
        }

        // üîπ –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –ø–µ—Ä—à–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (—É—Å–ø—ñ—à–Ω–æ/–Ω–µ–≤–¥–∞–ª–æ)
        override fun didCompleteInitialLoad(controller: SFSafariViewController?, success: Boolean) {
            if (success) {
                println("üåç –í–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞!")
            } else {
                println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≤–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∏!")
            }
        }

        // üîπ –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ, —è–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–æ–±–∏—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç
        override fun initialLoadDidRedirectToURL(controller: SFSafariViewController?, newURL: NSURL?) {
            println("üîÑ –í–µ–±-—Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–º—ñ–Ω–∏–ª–∞ URL –Ω–∞: ${newURL?.absoluteString}")
        }

        // üîπ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤ Safari (–∑–∞–º—ñ—Å—Ç—å WebView)
        override fun safariViewControllerWillOpenInBrowser(controller: SFSafariViewController?) {
            println("üåê –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–∫—Ä–∏—î—Ç—å—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ Safari!")
        }

        // üîπ –î–æ–¥–∞—î–º–æ –≤–ª–∞—Å–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ –º–µ–Ω—é —Å–ø—ñ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è')
        override fun getActivityItems(
            controller: SFSafariViewController?,
            url: NSURL?,
            title: String?
        ): NSArray<UIActivity?>? {
            println("üì§ –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–æ –º–µ–Ω—é '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è'")
            return NSArray()
        }

        // üîπ –í–∫–∞–∑—É—î–º–æ, —è–∫—ñ —Ç–∏–ø–∏ –¥—ñ–π –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ –º–µ–Ω—é '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è'
        override fun excludedActivityTypesForURL(
            p0: SFSafariViewController?,
            p1: NSURL?,
            p2: String?
        ): NSArray<NSString?>? {
            println("‚õî –í—ñ–¥–∫–ª—é—á–∞—î–º–æ –ø–µ–≤–Ω—ñ —Ç–∏–ø–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —É '–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è'")
            return NSArray(/*NSString("com.apple.UIKit.activity.PostToFacebook")*/) // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–∞–±–æ—Ä–æ–Ω—è—î–º–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é —É Facebook
        }
    }

}
